@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager
@model Bloggie.Web.Models.ViewModels.BlogDetailsViewModel

@{
    ViewData["Title"] = Model.PageTitle;
}
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if(Model != null)
            {
             <h1 class="mb-3">@Model.Heading</h1>   
             <div class="d-flex justify-content-between mb-3">
                 <span class="text-secondary">@Model.Author</span>
                 <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
             </div>
             <div class="mb-3">
                 @if(signInManager.IsSignedIn(User))
                    {
                        @if(Model.Liked)
                        {
                            <a style="cursor:pointer">
                                <i class="bi bi-heart-fill"></i>
                            </a>
                        }
                        else
                        {
                            <a id="buttonLike" style="cursor:pointer">
                                <i class="bi bi-heart"></i>
                            </a>
                        }
                    }
                    <span class="text-secondary" id="totalLikes">@Model.TotalLikes</span> Likes
             </div>
             <div class="mb-3 d-flex">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
             </div>
             <img src ="@Model.FeatureImageUrl" class="d-block img-fluid mb-3"/>
             <div class="mb-3 blog-details-content">
                 @Html.Raw(Model.Content)
             </div>
                <div class="card">
                    <div class="card-header">
                        <h5>Comments</h5>
                        @if (signInManager.IsSignedIn(User))
                        {
                            <form method="post">
                                <div class="mb-3">
                                    <label class="form-label">Comment Description</label>
                                    <input type="text" class="form-control" asp-for="CommentDescription"/>                                    
                                </div>
                                <div>
                                    <button type="submit" class="btn btn-dark">Submit</button>
                                    <input type="hidden" asp-for="Id" />
                                    <input type="hidden" asp-for="UrlHandle" />
                                </div>
                            </form>
                        }
                    </div>
                    <div class="card-body">
                        @if(Model.Comment!=null && Model.Comment.Any())
                        {
                            @foreach(var comment in Model.Comment)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div>
                                            @comment.Description
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span class="text-secondary">@comment.UserName</span>
                                            <span class="text-secondary">@comment.DateAdded.ToShortDateString()</span>
                                        </div>
                                    </div>
                                </div>
                            }
                    }
                    </div>
                </div>
            }
            else
            {
                <p>Blog Post not found</p>
            }
        </div>
    </div>
</div>

@section scripts
{
    <script>
        const btnLikeElement = document.getElementById('buttonLike');
        const totalLikesElement = document.getElementById('totalLikes');

        async function getTotalLikes()
        {
            await fetch('/api/BlogPostLike/@Model.Id/totalLikes',
            {
                method:'GET',
                headers:{
                        'Content-Type': 'application/json',
                        'Accept': '*/*'
                }
            }).then(data => data.json())
             .then(result => totalLikesElement.innerHTML = result)
        }

        async function addLikeForBlog()
            {
            await fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@userManager.GetUserId(User)'
                })
            }).then(() => {
                btnLikeElement.innerHTML = '<i class="bi bi-heart-fill"></i>';
                btnLikeElement.removeEventListener('click', addLikeForBlog);
                getTotalLikes();
            }

            );
        }
        btnLikeElement.addEventListener('click', addLikeForBlog);
    </script>
}
